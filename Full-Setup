#!/bin/bash

## Kali Setup Script  ##
## 
## Author: GreatUncleBulgaria	##
#
#	To Do:
#		setup an ssh user
#		install all the useful tools
# 		possibly add dash-to-dock tweaks
#		need to fix the print install-list section, ideally having a print list function and passing a
#			list to that.



## Colourise Output
RED="\033[01;31m"      # Issues/Errors
GREEN="\033[01;32m"    # Success
YELLOW="\033[01;33m"   # Warnings/Information
BLUE="\033[01;34m"     # Status
RESET="\033[00m"       # Normal


function banner {

echo -e "${GREEN}  ______                         _     _             _          ______        _                   _       "
echo -e "${GREEN} / _____)                _      | |   | |           | |        (____  \      | |                 (_)      "
echo -e "${GREEN}| /  ___  ____ ____ ____| |_    | |   | |____   ____| | ____    ____)  )_   _| | ____  ____  ____ _  ____ "
echo -e "${GREEN}| | (___)/ ___) _  ) _  |  _)   | |   | |  _ \ / ___) |/ _  )  |  __  (| | | | |/ _  |/ _  |/ ___) |/ _  |"
echo -e "${GREEN}| \____/| |  ( (/ ( ( | | |__   | |___| | | | ( (___| ( (/ /   | |__)  ) |_| | ( ( | ( ( | | |   | ( ( | |"
echo -e "${GREEN} \_____/|_|   \____)_||_|\___)   \______|_| |_|\____)_|\____)  |______/ \____|_|\_|| |\_||_|_|   |_|\_||_|"
echo -e "${GREEN}                                                                               (_____|                    "
echo -e "${GREEN} _    _      _ _       _                                _                _                                "
echo -e "${GREEN}| |  / )    | (_)     | |         _                    | |              (_)      _                        "
echo -e "${GREEN}| | / / ____| |_       \ \   ____| |_ _   _ ____        \ \   ____  ____ _ ____ | |_                      "
echo -e "${GREEN}| |< < / _  | | |       \ \ / _  )  _) | | |  _ \        \ \ / ___)/ ___) |  _ \|  _)                     "
echo -e "${GREEN}| | \ ( ( | | | |   _____) | (/ /| |_| |_| | | | |   _____) | (___| |   | | | | | |__                     "
echo -e "${GREEN}|_|  \_)_||_|_|_|  (______/ \____)\___)____| ||_/   (______/ \____)_|   |_| ||_/ \___)                    "
echo -e "${GREEN}                                           |_|                            |_|                             "
echo -e "${GREEN}Version 2.0"
}
# ascii art from: http://patorjk.com/software/taag/
# font: Stop



function usage {
    echo -e "${YELLOW}Usage: $0 -s [-d] [--ftp-port 2121] [-u GreatUncleBulgaria] [-h] [-r] [-v] [-vs Mounty] [-vm /media/MountyMcMountFace]"
    printf "\n"
    echo -e "${YELLOW}       -d | --dist-upgrade: Perform 'dist-upgrade', defaults to 'false', varies script execution time."
    echo -e "${YELLOW}       -ftp-port | --ftp-port: Specify the port for the FTP server to run on, defaults to 21-TCP."
    echo -e "${YELLOW}       -h | --help: Print the script usage information."
    echo -e "${YELLOW}       -r | --reboot: Reboot the system automatically on script completion, defaults to 'false'."
    echo -e "${YELLOW}       -s | --start: Start the script, defaults to 'false', needs to be stated for script to run."
    echo -e "${YELLOW}       -u | --service-username: Specify a username for service creation, defaults to 'User1'."
    echo -e "${YELLOW}       			      This username will be used for all created service accounts."
    echo -e "${YELLOW}       -v | --vbox: Install VirtualBox guest editions."
    echo -e "${YELLOW}       -vs| --vbox-sharename: Specify the VirtualBox shared folder name, requires -vm. 
    										  This must match the shared folder name in the VM settings, defaults to 'VBOX-Share'."
    echo -e "${YELLOW}       -vm| --vbox-mountpoint: Specify the VirtualBox desired mount point.
    										  Requires -vs and fully qualified path, defaults to '/media/vbox-share'."

    echo -e "${YELLOW}       Default install list:"
    echo -e "${YELLOW}       	${print-list '${install-list}'}"

}

function print-list {
	for i in ${install-list[@]}; do printf '%s\n' ${i}; done
}

# Check running as root

if [[ ! $(id -u) == 0 ]]; then
    echo -e "${RED}[!]${RESET} Script need to be ran as root"
    exit 1
fi



# assign script default parameters

dist="false"
ftpport="21"
start="false"
reboot="false"
username="user1"

vbox="false"
vboxShareName="VBOX-Share"
vboxMountPoint="/media/vbox-share"


# default install list

install-list=(pure-ftpd atftpd virtualbox-guest-x11 netminer ftp)



while [[ "${#}" -gt 0 && ."${1}" == .-* ]]; do
  opt="${1}";
  shift;
  case "$(echo ${opt} | tr '[:upper:]' '[:lower:]')" in
    -|-- ) break 2;;

    -d|--dist-upgrade )
       dist=true;;

    -ftp-port|--ftp-port )
       ftpport="${1}"; shift;;

    -h|--help )
       usage; exit 0;;

    -r|--reboot )
       reboot=true;;

    -s|--start )
       start=true;;

    -u|--service-username )
       username="${1}"; shift;;

    -v|--virtualbox )
       vbox=true;;

    -vs|--virtualbox-sharename )
       vboxShareName="${1}"; shift;;

    -vs|--virtualbox-mountpoint )
       vboxMountPoint="${1}"; shift;;

    *) echo -e "${RED}[!]${RESET} Unknown option: ${RED}${x}${RESET}" 1>&2 && exit 1;;
   esac
done




# Print the banner function
banner


# Start the script?

if [ "${start}" != "false" ]; then
	echo -e "${BLUE}[+]${RESET} Starting setup script'."
else
  	usage
	exit 1
fi



# printing script args

echo -e "${BLUE}[+]${RESET} Script running with the following parameters;"
echo -e "${BLUE}[+]${RESET} 	Dist-upgrade : ${dist}"
echo -e "${BLUE}[+]${RESET} 	FTP Port : ${ftpport}"
echo -e "${BLUE}[+]${RESET} 	Username : ${username}"
echo -e "${BLUE}[+]${RESET} 	Reboot : ${reboot}"
echo -e "${BLUE}[+]${RESET} 	VirtualBox Guest Editions Install : ${vbox}"
echo -e "${BLUE}[+]${RESET} 	VirtualBox Share Name : ${vboxShareName}"
echo -e "${BLUE}[+]${RESET} 	VirtualBox Mount Point : ${vboxMountPoint}"



# add in the kali rolling repos

echo -e "${BLUE}[+]${RESET} Adding the Kali Rolling Repositories to /etc/apt/sources.list."
echo "deb http://http.kali.org/kali kali-rolling main contrib non-free" >> /etc/apt/sources.list
echo "# For source package access, uncomment the following line" >> /etc/apt/sources.list
echo "# deb-src http://http.kali.org/kali kali-rolling main contrib non-free" >> /etc/apt/sources.list



# update apt

echo -e "${BLUE}[+]${RESET} Starting 'apt-get update'."
apt-get update || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2



# update the OS

if [ "${dist}" != "false" ]; then
  	echo -e "${BLUE}[+]${RESET} Starting 'apt-get dist-upgrade -y'."
  	apt-get dist-upgrade -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2
fi


# install vbox guest editions

if [ "${vbox}" != "false" ]; then
  	echo -e "${BLUE}[+]${RESET} Installing VirtualBox Guest Editions X11."
  	apt-get install virtualbox-guest-x11 -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2
  	mkdir -p ${vboxMountPoint}
fi


## INSTALLING SERVICES

# install pureftpd

echo -e "${BLUE}[+]${RESET} Installing PureFTPd."
apt-get install pure-ftpd -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2



# install atftpd

echo -e "${BLUE}[+]${RESET} Installing ATFTPd."
apt-get install atftpd -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2



## INSTALLING USEFUL TOOLS

# install netminer and dependencies

echo -e "${BLUE}[+]${RESET} Installing NetMiner and dependencies."
apt-get install libmono-system-windows-forms4.0-cil -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2
apt-get install libmono-system-web4.0-cil -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2
apt-get install libmono-system-net4.0-cil -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2
apt-get install libmono-system-runtime-serialization4.0-cil -y || echo -e " '${RED}'[!] Issue with apt-get"${RESET} 1>&2

wget www.netresec.com/?download=NetworkMiner -O /tmp/nm.zip
unzip /tmp/nm.zip -d /opt/
rm /tmp/nm.zip
cd /opt/NetworkMiner*
chmod +x NetworkMiner.exe
chmod -R go+w AssembledFiles/
chmod -R go+w Captures/



# install the ftp client

echo -e "${BLUE}[+]${RESET} Installing useful tools."
apt-get install ftp -y



# setup pure-ftpd

echo -e "${BLUE}[+]${RESET} Setting up PureFTPd."
echo ${ftpport} > /etc/pure-ftpd/conf/Bind
groupadd ftpgroup
useradd -g ftpgroup -d /dev/null -s /etc ftpuser
echo -e "${YELLOW}[+]${RESET} You will need to enter a password for the FTP user account and confirm it."
pure-pw useradd ${username} -u ftpuser -d /srv/ftp
pure-pw mkdb
cd /etc/pure-ftpd/auth
ln -s /etc/pure-ftpd/conf/PureDB 60pdb
mkdir -p /srv/ftp
chown -R ftpuser:ftpgroup /srv/ftp/

# to delete users
# pure-pw userdel user1



# setup atftpd

echo -e "${BLUE}[+]${RESET} Setting up ATFTPd."
sed -e 's/^USE_INETD=true/USE_INETD=false/g' -i /etc/default/atftpd



# add bashrc shortcuts

echo -e "${BLUE}[+]${RESET} Assigning useful bash shortcuts."
echo "alias netminer='mono /opt/NetworkMiner_2-2/NetworkMiner.exe'" >> /etc/bash.bashrc
echo "alias ws='python -m SimpleHTTPServer'" >> /etc/bash.bashrc
echo "alias jn='john --wordlist=/usr/share/wordlists/rockyou.txt'" >> /etc/bash.bashrc
echo "alias xc='xclip -selection c.'" >> /etc/bash.bashrc
echo "alias sS='searchsploit'" >> /etc/bash.bashrc

if [ "${vbox}" != "false" ]; then
	echo "alias ms='mount -t vboxsf ${vboxShareName} ${vboxMountPoint}'" >> /etc/bash.bashrc
fi



# changing the dash-to-dock settings

# list all dash-to-dock keys
# gsettings list-keys org.gnome.shell.extensions.dash-to-dock

# extend the dock to the edge of the screen
gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true

# reduce the icon size
gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 24

# stop the dock from auto-hiding
gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true



# changing the updatedb.conf to include /media

sed -e 's/ \/media//g' -i /etc/updatedb.conf



# print script completion information

echo -e "${BLUE}[+]${RESET} Script completed."
printf "\n\n"
echo -e "${YELLOW}[+]${RESET} !!! All services are stopped by default, you will have to start them manually !!!"
printf "\n\n"
echo -e "${YELLOW}[+]${RESET} PureFTPd information:"
echo -e "${YELLOW}[+]${RESET} 		Server port: ${ftpport}"
echo -e "${YELLOW}[+]${RESET} 		User created: ${username}"
echo -e "${YELLOW}[+]${RESET} 		Start/stop/restart the service: service pure-ftpd start|stop|restart"
echo -e "${YELLOW}[+]${RESET} 		Delete user command:  pure-pw userdel ${username}"
echo -e "${YELLOW}[+]${RESET} 		Create user commands: pure-pw useradd NEWUSERNAME -u ftpuser -d /srv/ftp"
echo -e "${YELLOW}[+]${RESET} 							  pure-pw mkdb"
echo -e "${YELLOW}[+]${RESET} 							  service pureftpd restart"

echo -e "${YELLOW}[+]${RESET} ATFTPd information:"
echo -e "${YELLOW}[+]${RESET} 		Start/stop/restart the service: service atftpd start|stop|restart"

echo -e "${YELLOW}[+]${RESET} Assigned alias:"
echo -e "${YELLOW}[+]${RESET} 		netminer='mono /opt/NetworkMiner_2-2/NetworkMiner.exe'"
echo -e "${YELLOW}[+]${RESET} 		ws='python -m SimpleHTTPServer'"
echo -e "${YELLOW}[+]${RESET} 		jn='john --wordlist=/usr/share/wordlists/rockyou.txt'"
echo -e "${YELLOW}[+]${RESET} 		xc='xclip -selection c.'"
echo -e "${YELLOW}[+]${RESET} 		sS='searchsploit'"
if [ "${vbox}" != "false" ]; then
	echo -e "${YELLOW}[+]${RESET} 		ms='mount -t vboxsf ${vboxShareName} ${vboxMountPoint}'"
fi

echo -e "${YELLOW}[+]${RESET} Dash-to-Dock setting information:"
echo -e "${YELLOW}[+]${RESET} 		Extended the dock to the edge of the screen."
echo -e "${YELLOW}[+]${RESET} 			gsettings set org.gnome.shell.extensions.dash-to-dock extend-height true"
echo -e "${YELLOW}[+]${RESET} 		Reduced the icon size to 24px."
echo -e "${YELLOW}[+]${RESET} 			gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 24"
echo -e "${YELLOW}[+]${RESET} 		Stopped the dock from auto-hiding."
echo -e "${YELLOW}[+]${RESET} 			gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed true"
echo -e "${YELLOW}[+]${RESET} 		"

echo -e "${YELLOW}[+]${RESET} MLocate information:"
echo -e "${YELLOW}[+]${RESET} 		updatedb.conf updated to include /media."
echo -e "${YELLOW}[+]${RESET} 		Allows locating files in the VirtualBox share."
echo -e "${YELLOW}[+]${RESET} 		Run 'sudo updatedb' to refresh MLocate database, then 'locate <filename>'."


# reboot?

if [ "${reboot}" != "false" ]; then
	echo -e "${BLUE}[+]${RESET} Rebooting system in 60 seconds."
	/sbin/shutdown -r

else
	echo -e "${BLUE}[+]${RESET} System needs to be rebooted to apply VBox settings."
fi
